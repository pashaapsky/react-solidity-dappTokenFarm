{
  "language": "Solidity",
  "sources": {
    "contracts/TokenFarm.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract TokenFarm is Ownable {\r\n    //stakeTokens - купить токены\r\n    //unstakeToken - продать токены,\r\n    //issueTokens - выпуск токентов\r\n    //addAllowedTokens - добавить доступные токены\r\n    //getValue - конверсия в ETH\r\n\r\n    //token address => staker address => amount\r\n    mapping(address => mapping(address => uint256)) public stakingBalance;\r\n    //сколько различных типов токенов есть у адресса\r\n    mapping(address => uint256) public uniqueTokensStaked;\r\n    //адресс токена -> на адресс priceFeed токена\r\n    mapping(address => address) public tokenPriceFeedMapping;\r\n    //лист stakers\r\n    address[] public stakers;\r\n    address[] public allowedTokens;\r\n    //контракт с нашими DAPP токенами\r\n    IERC20 public dappToken;\r\n\r\n    constructor(address _dappTokenAddress) {\r\n        dappToken = IERC20(_dappTokenAddress);\r\n    }\r\n\r\n    function setPriceFeedContract(address _token, address _priceFeed) public onlyOwner {\r\n        tokenPriceFeedMapping[_token] = _priceFeed;\r\n    }\r\n\r\n    //выпустить токены для всех stakers\r\n    function issueTokens() public onlyOwner {\r\n        for (uint256 stakerIndex = 0; stakerIndex < stakers.length; stakerIndex++) {\r\n            address user = stakers[stakerIndex];\r\n            //отправить награду в зависимости сколько у них уже есть токенов\r\n            uint256 userTotalValue = getUserTotalValue(user);\r\n            dappToken.transfer(user, userTotalValue);\r\n        }\r\n    }\r\n\r\n    //сколько value есть у владельца\r\n    function getUserTotalValue(address _user) public view returns (uint256) {\r\n        uint256 totalValue = 0;\r\n        require(uniqueTokensStaked[_user] > 0, \"No tokens staked\");\r\n        for (uint256 allowedTokenIndex = 0; allowedTokenIndex < allowedTokens.length; allowedTokenIndex++) {\r\n            totalValue = totalValue + getUserSingleTokenValue(_user, allowedTokens[allowedTokenIndex]);\r\n        }\r\n\r\n        return totalValue;\r\n    }\r\n\r\n    //получить стоимость всех токенов определенного типа у юзера\r\n    function getUserSingleTokenValue(address _user, address _token) public view returns (uint256) {\r\n        if (uniqueTokensStaked[_user] <= 0) {\r\n            return 0;\r\n        }\r\n        //price of the token * stakingBalance[_token][_user]\r\n        (uint256 price, uint256 decimals) = getTokenValue(_token);\r\n\r\n        // 10000000000000000000 ETH\r\n        // ETH/USD -> 10000000000 (price)\r\n        // 10 * 100 = 1,000\r\n        return (stakingBalance[_token][_user] * price / (10 ** decimals));\r\n    }\r\n\r\n    //получить стоимость одного токена\r\n    function getTokenValue(address _token) public view returns (uint256, uint256) {\r\n        address priceFeedAddress = tokenPriceFeedMapping[_token];\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n        (,int price,,,) = priceFeed.latestRoundData();\r\n        uint256 decimals = uint256(priceFeed.decimals());\r\n\r\n        return (uint256(price), decimals);\r\n    }\r\n\r\n    //взять токены в долю\r\n    function stakeTokens(uint256 _amount, address _token) public {\r\n        require(_amount > 0, \"Amount must be more than 0\");\r\n        require(tokenIsAllowed(_token), \"Token is not Allowed\");\r\n        //переводим\r\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\r\n        updateUniqueTokenStaked(msg.sender, _token);\r\n        //записываем в маппинг новую сумму - сколько токенов на счете\r\n        stakingBalance[_token][msg.sender] = stakingBalance[_token][msg.sender] + _amount;\r\n        //обновляем кол-во уникальных токенов у sender и добавляем самого sender\r\n        if (uniqueTokensStaked[msg.sender] == 1) {\r\n            stakers.push(msg.sender);\r\n        }\r\n    }\r\n\r\n    function unstakeTokens(address _token) public {\r\n        uint256 balance = stakingBalance[_token][msg.sender];\r\n        require(balance > 0, \"Staking balance can`t be 0\");\r\n        IERC20(_token).transfer(msg.sender, balance);\r\n        stakingBalance[_token][msg.sender] = 0;\r\n        uniqueTokensStaked[msg.sender] = uniqueTokensStaked[msg.sender] - 1;\r\n    }\r\n\r\n    //internal - только этот контракт может вызывать эту функцию\r\n    //сколько уникальных токенов у юзера\r\n    function updateUniqueTokenStaked(address _user, address _token) internal {\r\n        if (stakingBalance[_token][_user] <= 0) {\r\n            uniqueTokensStaked[_user] = uniqueTokensStaked[_user] + 1;\r\n        }\r\n    }\r\n\r\n\r\n    function addAllowedTokens(address _token) public onlyOwner {\r\n        allowedTokens.push(_token);\r\n    }\r\n\r\n    //доступен ли такой токен?\r\n    function tokenIsAllowed(address _token) public view returns (bool) {\r\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\r\n            if (allowedTokens[i] == _token) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}